#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

const char* ssid = "Abdul-2G";
const char* password = "0506749918";

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");


int speed1 = 14;      // GPIO14---D5 of NodeMCU
int speed2 = 12;      // GPIO12---D6 of NodeMCU
int speed3 = 13;      // GPIO13---D7 of NodeMCU
int ledPin = 15;      // GPIO15---D8 of NodeMCU
int oscillation = 2;  // GPIO2---D4 of NodeMCU

int speedButton = 5;        // GPIO5---D1 of NodeMCU - ON button
int offButton = 4;          // GPIO4---D2 of NodeMCU - ON button
int oscillationButton = 0;  // GPIO0---D3 of NodeMCU - ON button

int laststate1 = 1;  // Variable to store the last state of the button
int laststate2 = 1;  // Variable to store the last state of the button
int laststate3 = 1;  // Variable to store the last state of the button

bool oscillationOn = false;
int currentSpeed = 0;
WiFiServer server(80);

//timer
String currentTime = "";
String turnOffTimerValue = String();

void setup() {
  Serial.begin(115200);
  delay(10);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  //INITIALIZE FAN CONTROLS
  pinMode(speed1, OUTPUT);
  pinMode(speed2, OUTPUT);
  pinMode(speed3, OUTPUT);
  pinMode(oscillation, OUTPUT);
  fanControl(0);

  //buttons
  pinMode(speedButton, INPUT_PULLUP);
  pinMode(offButton, INPUT_PULLUP);
  pinMode(oscillationButton, INPUT_PULLUP);



  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    Serial.println(WiFi.status());
  }
  Serial.println("");
  digitalWrite(ledPin, HIGH);
  Serial.println("WiFi connected");

  // Initialize a NTPClient to get time
  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone, for example:
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(14400);


  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.print("Use this URL to connect: ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println("/");
}
void oscillationControl(bool forceTurnOff) {
  Serial.println("oscillationControl");
  Serial.println("forceTurnOff = ");

  Serial.print(forceTurnOff);
  Serial.println("oscillationOn = ");

  Serial.print(oscillationOn);
  Serial.println("----");

  if (forceTurnOff || currentSpeed == 0) {
    digitalWrite(oscillation, HIGH);
    oscillationOn = false;
  } else if (oscillationOn == 0) {
    digitalWrite(oscillation, LOW);
    oscillationOn = true;
  } else if (oscillationOn == 1) {
    digitalWrite(oscillation, HIGH);
    oscillationOn = false;
  }
}
void fanControl(int x) {
  if (x == 1) {
    digitalWrite(speed1, LOW);
    digitalWrite(speed2, HIGH);
    digitalWrite(speed3, HIGH);
  } else if (x == 2) {
    digitalWrite(speed1, HIGH);
    digitalWrite(speed2, LOW);
    digitalWrite(speed3, HIGH);
  } else if (x == 3) {
    digitalWrite(speed1, HIGH);
    digitalWrite(speed2, HIGH);
    digitalWrite(speed3, LOW);
  } else {
    digitalWrite(speed1, HIGH);
    digitalWrite(speed2, HIGH);
    digitalWrite(speed3, HIGH);
    oscillationControl(true);
  }
  currentSpeed = x;
  Serial.println("Fan speed = ");
  Serial.print(currentSpeed);
}
void checkTime() {
  timeClient.update();
  String temp = timeClient.getFormattedTime();
  currentTime = temp.substring(0, 5);
  if (turnOffTimerValue != nullptr && turnOffTimerValue == currentTime) {
    fanControl(0);
    turnOffTimerValue = String();
    Serial.println("Timer Turned Off");
  }
}
 
  //manual

  int buttonValue1 = digitalRead(speedButton);
  int buttonValue2 = digitalRead(offButton);
  int buttonValue3 = digitalRead(oscillationButton);
  // Serial.println(buttonValue1);

  // Check if the button is pressed (LOW) and has changed state from the last read
  if (buttonValue1 == LOW && buttonValue1 != laststate1) {
    // Toggle the state
    Serial.println("button pressed");
    if (currentSpeed < 3) {
      fanControl(currentSpeed + 1);
    } else {
      fanControl(1);
    }

  } else if (buttonValue2 == LOW && buttonValue2 != laststate2) {
    fanControl(0);
  } else if (buttonValue3 == LOW && buttonValue3 != laststate3) {
    oscillationControl(false);
  }

  // Update the last state of the button
  laststate1 = buttonValue1;
  laststate2 = buttonValue2;
  laststate3 = buttonValue3;
  // Small delay to debounce the button
  delay(100);

  checkTime();

  //wifi related
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }

  // Wait until the client sends some data
  Serial.println("new client");
  while (!client.available()) {
    delay(1);
  }

  // Read the first line of the request
  String request = client.readStringUntil('\r');
  Serial.println(request);
  client.flush();

  // Match the request

  int value = LOW;
  if (request.indexOf("/LED=ON") != -1) {
    digitalWrite(ledPin, HIGH);
    value = HIGH;
  }
  if (request.indexOf("/LED=OFF") != -1) {
    digitalWrite(ledPin, LOW);
    value = LOW;
  }
  if (request.indexOf("/FAN=OFF") != -1) {
    fanControl(0);
  }
  if (request.indexOf("/FAN=1") != -1) {
    fanControl(1);
  }
  if (request.indexOf("/FAN=2") != -1) {
    fanControl(2);
  }
  if (request.indexOf("/FAN=3") != -1) {
    fanControl(3);
  }
  if (request.indexOf("/OSCILLATION=ON") != -1) {
    oscillationControl(false);
  }
  if (request.indexOf("/SET_TIME") != -1) {
    String timeValue = "";
    int timeIndex = request.indexOf("time=");
    if (timeIndex != -1) {
      int timeEndIndex = request.indexOf(" ", timeIndex);
      if (timeEndIndex == -1) {
        timeEndIndex = request.length();
      }
      timeValue = request.substring(timeIndex + 5, timeEndIndex);
      // Replace %3A with -
      timeValue.replace("%3A", ":");
    }
    turnOffTimerValue = timeValue;
    Serial.println("Time parameter received:");
    Serial.println(timeValue);
  }

  // Set ledPin 0
  //digitalWrite(ledPin, value);

// Return the response
client.println("HTTP/1.1 200 OK");
client.println("Content-Type: text/html");
client.println("");  // do not forget this one
client.println("<!DOCTYPE HTML>");
client.println("<html>");

client.println("<br><br>");
client.println("<!DOCTYPE html>");
client.println("<html lang=\"en\">");
client.println("<head>");
client.println("  <meta charset=\"UTF-8\">");
client.println("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
client.println("  <title>Control Panel</title>");
client.println("  <style>");
client.println("    body{font-family:Arial,sans-serif;background-color:#f0f0f0;text-align:center;padding:20px}");
client.println("    h1{color:#333}");
client.println("    a{text-decoration:none}");
client.println("    button{background-color:#4CAF50;color:white;border:none;padding:10px 20px;text-align:center;text-decoration:none;display:inline-block;font-size:16px;margin:10px 5px;cursor:pointer;border-radius:8px;transition:background-color 0.3s ease}");
client.println("    button:hover{background-color:#45a049}");
client.println("    button.active{background-color:#FFA500}"); // Orange color for active button
client.println("    .container{background-color:#fff;padding:20px;border-radius:10px;box-shadow:0 0 10px rgba(0,0,0,0.1);display:inline-block;width:85%;max-width:600px}");
client.println("    @media (max-width: 600px){button{width:100%;box-sizing:border-box}.container{padding:10px}body{padding:10px}}");
client.println("  </style>");
client.println("  <script>");
client.println("    window.onload=function(){var buttons=document.querySelectorAll('a button');buttons.forEach(function(button){var href=button.parentElement.getAttribute('href');if(window.location.href.indexOf(href)!==-1){button.classList.add('active')}})}");
client.println("  </script>");
client.println("</head>");
client.println("<body>");
client.println("  <div class=\"container\">");
client.println("    <br><br>");
client.println("    <h1>Fan Control</h1>");
if (currentSpeed == 0) {
    client.println("    <h3>Fan Off</h3>");
} else {
    client.print("    <h3>Current Speed : ");
    client.print(currentSpeed);
    client.println("    </h3><br />");
}
client.println("    <a href=\"/FAN=OFF\"><button>Off</button></a><br /><br />");
client.println("    <a href=\"/FAN=1\"><button>Speed 1</button></a><br /><br />");
client.println("    <a href=\"/FAN=2\"><button>Speed 2</button></a><br /><br />");
client.println("    <a href=\"/FAN=3\"><button>Speed 3></button></a><br /><br />");
client.println("    <a href=\"/OSCILLATION=ON\"><button>Oscillation</button></a><br /><br />");
if (currentSpeed > 0) {
    // Adding the time selection option
    client.println("    <h1>Set Timer</h1>");
    client.println("    <form action=\"/SET_TIME\" method=\"GET\">");
    client.println("      <label for=\"time\">Select Time:</label>");
    client.println("      <input type=\"time\" id=\"time\" name=\"time\"><br><br>");
    client.println("      <input type=\"submit\" value=\"Set Time\">");
    client.println("    </form>");
}
client.println("  </div>");
client.println("</body>");
client.println("</html>");




  delay(1);
  Serial.println("Client disonnected");
  Serial.println("");
}
